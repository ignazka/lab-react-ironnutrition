{"version":3,"sources":["Components/FoodBox.js","Components/FoodForm.js","App.jsx","serviceWorker.js","index.js"],"names":["FoodBox","name","image","calories","quantity","onClick","React","useState","state","setState","key","className","src","alt","type","value","onChange","target","console","log","FoodForm","initialState","handleChange","onSubmit","event","preventDefault","newFood","htmlFor","App","show","setShow","food","foods","setFoods","searchTerm","setSeardchTerm","Map","selectedFoods","setSelectedFoods","handleSelectFood","selectedFood","get","newState","set","a","b","Number","mergeFoods","placeholder","style","color","filter","toLowerCase","includes","map","entry","backgroundImage","foodName","delete","handleRemoveSelectedFood","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kqDAoDeA,G,WAjDC,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAClD,EAA0BC,IAAMC,SAASH,GAAzC,mBAAOI,EAAP,KAAcC,EAAd,KAUA,OACE,yBAAKC,IAAKT,EAAMU,UAAU,WACxB,6BAASA,UAAU,SACjB,yBAAKA,UAAU,cACb,4BAAQA,UAAU,kBAChB,yBAAKC,IAAKV,EAAOW,IAAKZ,MAG1B,yBAAKU,UAAU,iBACb,yBAAKA,UAAU,WACb,2BACE,gCAASV,GADX,IAC0B,6BACxB,+BAAQE,EAAR,WAIN,yBAAKQ,UAAU,eACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,WACb,2BACEA,UAAU,QACVG,KAAK,SACLC,MAAOP,EACPQ,SA/BO,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OAAgBR,EAASQ,EAAOF,WAkC3C,yBAAKJ,UAAU,WACb,4BAAQN,QAlCA,WAEhBa,QAAQC,IAAI,SACZd,EAAQ,CAAEJ,OAAME,WAAUD,QAAOE,SAAUI,KA+BLG,UAAU,kBAAxC,Y,sBCwBCS,EA/DE,SAAC,GAAgB,IAAdf,EAAa,EAAbA,QACZgB,EAAe,CAAEpB,KAAM,GAAIE,SAAU,EAAGD,MAAO,GAAIE,SAAU,GACnE,EAA0BE,IAAMC,SAASc,GAAzC,mBAAOb,EAAP,KAAcC,EAAd,KACMa,EAAe,SAAC,GAAgB,IAAdL,EAAa,EAAbA,OACtBR,EAAS,2BAAKD,GAAN,kBAAcS,EAAOhB,KAAOgB,EAAOF,UAiB7C,OACE,0BAAMJ,UAAU,OAAOY,SAhBJ,SAACC,GACpBA,EAAMC,iBACN,IAAMC,EAAO,eAAQlB,GAEjBA,EAAML,UACRE,EAAQqB,GAEVjB,EAASY,KAUP,2BAAOV,UAAU,QAAQgB,QAAQ,QAAjC,QAGA,2BACEhB,UAAU,QACVG,KAAK,OACLb,KAAK,OACLc,MAAOP,EAAMP,KACbe,SAAUM,IAGZ,2BAAOX,UAAU,QAAQgB,QAAQ,SAAjC,aAGA,2BACEhB,UAAU,QACVG,KAAK,OACLb,KAAK,QACLc,MAAOP,EAAMN,MACbc,SAAUM,IAEZ,2BAAOX,UAAU,QAAQgB,QAAQ,YAAjC,YAGA,2BACEhB,UAAU,QACVG,KAAK,SACLb,KAAK,WACLc,MAAOP,EAAML,SACba,SAAUM,IAEZ,4BAAQX,UAAU,iBAAiBG,KAAK,UAAxC,SCyESc,MA1Hf,WACE,MAAwBtB,IAAMC,UAAS,GAAvC,mBAAOsB,EAAP,KAAaC,EAAb,KACA,EAA0BxB,IAAMC,SAASwB,GAAzC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAqC3B,IAAMC,SAAS,IAApD,mBAAO2B,EAAP,KAAmBC,EAAnB,KACA,EAA0C7B,IAAMC,SAAS,IAAI6B,KAA7D,mBAAOC,EAAP,KAAsBC,EAAtB,KAiBMC,EAAmB,SAACC,GAExB,IAAMT,EAAOM,EAAcI,IAAID,EAAavC,MAC5C,GAAI8B,EAAM,CAER,IAAMW,EAAW,IAAIN,IAAJ,YAAYC,IAK7B,OAHAK,EAASC,IAAIH,EAAavC,KAjB9B,SAAoB2C,EAAGC,GACrB,IAAMzC,EAAW0C,OAAOF,EAAExC,UAAY0C,OAAOD,EAAEzC,UAC/C,MAAO,CACLH,KAAM2C,EAAE3C,KACRG,WACAD,SAAUyC,EAAEzC,SACZD,MAAO0C,EAAE1C,OAWuB6C,CAAWhB,EAAMS,IAEjDtB,QAAQC,IAAIuB,GACLJ,EAAiBI,GAG1B,IAAMA,EAAW,IAAIN,IAAJ,YAAYC,IAE7BK,EAASC,IAAIH,EAAavC,KAAMuC,GAChCF,EAAiBI,IAenB,OACE,yBAAK/B,UAAU,OACb,yBAAKA,UAAU,oBACb,2BAAOA,UAAU,SAAjB,uBACA,yBAAKA,UAAU,0BACb,2BACEA,UAAU,mBACVG,KAAK,OACLkC,YAAY,SACZhC,SArBiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OAAgBkB,EAAelB,EAAOF,QAsBvDA,MAAOmB,IAET,uBACEvB,UAAU,8BACVsC,MAAO,CAAEC,MAAO,eAIpBrB,GACA,4BACExB,QAAS,kBAAMyB,GAASD,IACxBlB,UAAU,6BAFZ,YAQDkB,GAAQ,kBAAC,EAAD,CAAUxB,QAzED,SAACqB,GACrBI,GAASD,GACTI,EAAS,GAAD,mBAAKD,GAAL,CAAYN,QAwElB,yBAAKf,UAAU,WACb,yBAAKA,UAAU,aACZqB,EAAMmB,QAlCM,SAACpB,GAAD,OACnBA,EAAK9B,KAAKmD,cAAcC,SAASnB,IACjCH,EAAK9B,KAAKoD,SAASnB,MAgCeoB,KAAI,SAACC,GAE/B,OACE,kBAAC,EAAD,eAAS7C,IAAK6C,EAAMtD,MAAUsD,EAA9B,CAAqClD,QAASkC,SAIpD,yBAAK5B,UAAU,uBACb,6BACE,2CAED,YAAI0B,GAAeiB,KAAI,YAAgB,IAAD,mBAAVvB,GAAU,WACrC,OACE,yBACEpB,UAAU,qBACVsC,MAAO,CAAEO,gBAAgB,OAAD,OAASzB,EAAK7B,SAEtC,6BACE,yBAAKS,UAAU,qBACb,uBAAGA,UAAU,aAAaoB,EAAK9B,MAE/B,mCAAS6C,OAAOf,EAAK5B,UAAY2C,OAAOf,EAAK3B,WAC7C,mCAAS2B,EAAK3B,UACd,4BACEO,UAAU,4BACVN,QAAS,kBAjEI,SAACoD,GAChC,IAAMf,EAAW,IAAIN,IAAJ,YAAYC,IAC7BK,EAASgB,OAAOD,GAChBnB,EAAiBI,GA8DgBiB,CAAyB5B,EAAK9B,QAF/C,oBCpGA2D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3D,QAAQ2D,MAAMA,EAAMC,c","file":"static/js/main.102f8c16.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'bulma/css/bulma.css';\r\n\r\nconst FoodBox = ({ name, image, calories, quantity, onClick }) => {\r\n  const [state, setState] = React.useState(quantity);\r\n\r\n  const handleChange = ({ target }) => setState(target.value);\r\n  const handleClick = () => {\r\n   \r\n      console.log('click')\r\n      onClick({ name, calories, image, quantity: state });\r\n    \r\n  };\r\n\r\n  return (\r\n    <div key={name} className=\"FoodBox\">\r\n      <article className=\"media\">\r\n        <div className=\"media-left\">\r\n          <figure className=\"image is-64x64\">\r\n            <img src={image} alt={name} />\r\n          </figure>\r\n        </div>\r\n        <div className=\"media-content\">\r\n          <div className=\"content\">\r\n            <p>\r\n              <strong>{name}</strong> <br />\r\n              <small>{calories} cal</small>\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"media-right\">\r\n          <div className=\"field has-addons\">\r\n            <div className=\"control\">\r\n              <input\r\n                className=\"input\"\r\n                type=\"number\"\r\n                value={state}\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n            <div className=\"control\">\r\n              <button onClick={handleClick} className=\"button is-info\">\r\n                +\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </article>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FoodBox;\r\n","import React from 'react';\r\n\r\nconst FoodForm = ({ onClick}) => {\r\n  const initialState = { name: '', calories: 0, image: '', quantity: 0 };\r\n  const [state, setState] = React.useState(initialState);\r\n  const handleChange = ({ target }) => {\r\n    setState({ ...state, [target.name]: target.value });\r\n  };\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const newFood = { ...state };\r\n\r\n    if (state.calories) {\r\n      onClick(newFood);\r\n    }\r\n    setState(initialState);\r\n  };\r\n\r\n  // const handleShow = (event) => {\r\n  //   event.preventDefault();\r\n  //   console.log(event.target)\r\n  //   onClick({state: event.target.value})\r\n  // }\r\n  return (\r\n    <form className=\"form\" onSubmit={handleSubmit}>\r\n      <label className=\"label\" htmlFor=\"name\">\r\n        Name\r\n      </label>\r\n      <input\r\n        className=\"input\"\r\n        type=\"text\"\r\n        name=\"name\"\r\n        value={state.name}\r\n        onChange={handleChange}\r\n      />\r\n\r\n      <label className=\"label\" htmlFor=\"image\">\r\n        Image URL\r\n      </label>\r\n      <input\r\n        className=\"input\"\r\n        type=\"text\"\r\n        name=\"image\"\r\n        value={state.image}\r\n        onChange={handleChange}\r\n      />\r\n      <label className=\"label\" htmlFor=\"calories\">\r\n        Calories\r\n      </label>\r\n      <input\r\n        className=\"input\"\r\n        type=\"number\"\r\n        name=\"calories\"\r\n        value={state.calories}\r\n        onChange={handleChange}\r\n      />\r\n      <button className=\"button is-link\" type=\"submit\">\r\n        ADD\r\n      </button>\r\n      {/* <button className='button is-link is-light' value='false' type='submit' onClick={handleShow}>\r\n        Cancel\r\n      </button> */}\r\n    </form>\r\n  );\r\n};\r\nexport default FoodForm;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport 'bulma/css/bulma.css';\r\nimport FoodBox from './Components/FoodBox';\r\nimport food from './foods.json';\r\nimport FoodForm from './Components/FoodForm';\r\n\r\nfunction App() {\r\n  const [show, setShow] = React.useState(false);\r\n  const [foods, setFoods] = React.useState(food);\r\n  const [searchTerm, setSeardchTerm] = React.useState('');\r\n  const [selectedFoods, setSelectedFoods] = React.useState(new Map());\r\n\r\n  const handleNewFood = (newFood) => {\r\n    setShow(!show);\r\n    setFoods([...foods, newFood]);\r\n  };\r\n\r\n  function mergeFoods(a, b) {\r\n    const quantity = Number(a.quantity) + Number(b.quantity);\r\n    return {\r\n      name: a.name,\r\n      quantity,\r\n      calories: a.calories,\r\n      image: a.image,\r\n    };\r\n  }\r\n\r\n  const handleSelectFood = (selectedFood) => {\r\n    // check if we already have this food in the selected foods\r\n    const food = selectedFoods.get(selectedFood.name);\r\n    if (food) {\r\n      // copy previous state\r\n      const newState = new Map([...selectedFoods]);\r\n      // add sum of current selected food and new selected food\r\n      newState.set(selectedFood.name, mergeFoods(food, selectedFood));\r\n      // update the state\r\n      console.log(newState);\r\n      return setSelectedFoods(newState);\r\n    }\r\n    // copy previous state\r\n    const newState = new Map([...selectedFoods]);\r\n    // add the new food to the selected foods\r\n    newState.set(selectedFood.name, selectedFood);\r\n    setSelectedFoods(newState);\r\n  };\r\n\r\n  const handleSearchChange = ({ target }) => setSeardchTerm(target.value);\r\n\r\n  const handleRemoveSelectedFood = (foodName) => {\r\n    const newState = new Map([...selectedFoods]);\r\n    newState.delete(foodName);\r\n    setSelectedFoods(newState);\r\n  };\r\n\r\n  const bySearchTerm = (food) =>\r\n    food.name.toLowerCase().includes(searchTerm) ||\r\n    food.name.includes(searchTerm);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"field search-bar\">\r\n        <label className=\"label\">Search Food in List</label>\r\n        <div className=\"control has-icons-left\">\r\n          <input\r\n            className=\"input is-primary\"\r\n            type=\"text\"\r\n            placeholder=\"Search\"\r\n            onChange={handleSearchChange}\r\n            value={searchTerm}\r\n          />\r\n          <i\r\n            className=\"icon is-left fas fa-search \"\r\n            style={{ color: 'tomato' }}\r\n          ></i>\r\n        </div>\r\n      </div>\r\n      {!show && (\r\n        <button\r\n          onClick={() => setShow(!show)}\r\n          className=\"button is-success btn-add\"\r\n        >\r\n          Add Food\r\n        </button>\r\n      )}\r\n\r\n      {show && <FoodForm onClick={handleNewFood} />}\r\n      <div className=\"section\">\r\n        <div className=\"food-list\">\r\n          {foods.filter(bySearchTerm).map((entry) => {\r\n            // ...entry = entry.name entry.image entry.calories\r\n            return (\r\n              <FoodBox key={entry.name} {...entry} onClick={handleSelectFood} />\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"ctn-total container\">\r\n          <div>\r\n            <h3>Total Food</h3>\r\n          </div>\r\n          {[...selectedFoods].map(([_, food]) => {\r\n            return (\r\n              <div\r\n                className=\"selected-food-list\"\r\n                style={{ backgroundImage: `url(${food.image}` }}\r\n              >\r\n                <div>\r\n                  <div className='food-list-content'>\r\n                    <p className=\"food-name\">{food.name}</p>\r\n\r\n                    <p>Cal: {Number(food.calories) * Number(food.quantity)}</p>\r\n                    <p>Qty: {food.quantity}</p>\r\n                    <button\r\n                      className=\"button is-danger is-small\"\r\n                      onClick={() => handleRemoveSelectedFood(food.name)}\r\n                    >\r\n                      delete\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}